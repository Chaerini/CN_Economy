# -*- coding: utf-8 -*-
"""충남데이터분석_최종.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sfN_g8-3uwBC9-mSKZcIOUCSibh9w54V
"""

# 한글 패치
!sudo apt-get install -y fonts-nanum

!sudo fc-cache -fv

!rm ~/.cache/matplotlib -rf

"""# 데이터 불러오기"""

# 구글 드라이브 데이터 불러오기
from google.colab import drive
drive.mount('/content/drive')

# 압축파일 풀기
import zipfile

zip_path = "/content/drive/MyDrive/2023데이터청년캠퍼스/KCB.zip"  # 압축 파일의 경로를 지정합니다.
extract_path = "/content"  # 압축 해제될 경로를 지정합니다.

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# 압축파일 풀기
zip_path = "/content/drive/MyDrive/2023데이터청년캠퍼스/KCB(2).zip"  # 압축 파일의 경로를 지정합니다.
extract_path = "/content"  # 압축 해제될 경로를 지정합니다.

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# 압축파일 풀기
zip_path = "/content/drive/MyDrive/2023데이터청년캠퍼스/KCB(3).zip"  # 압축 파일의 경로를 지정합니다.
extract_path = "/content"  # 압축 해제될 경로를 지정합니다.

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

# 행정동코드 파일 가져오기
import pandas as pd
csv_file_path = '/content/drive/MyDrive/2023데이터청년캠퍼스/행정동 코드.csv'

# CSV 파일 읽어오기
dong_data = pd.read_csv(csv_file_path)

# 가져온 데이터를 확인
dong_data

# 비트코인데이터 가져오기
csv_file_path = '/content/drive/MyDrive/2023데이터청년캠퍼스/Bitcoin - 비트코인 과거 데이터 - Investing.com.csv'

# CSV 파일 읽어오기
coin_data = pd.read_csv(csv_file_path)

# 가져온 데이터를 확인
coin_data

import re

# 날짜 컬럼 형식 변경
def convert_date(date_str):
    cleaned_date = re.sub(r'[년월]', '', date_str)
    year, month = map(int, cleaned_date.split())
    formatted_date = f'{year:04d}{month:02d}'
    return formatted_date

# apply 함수를 사용하여 날짜 컬럼 변환
coin_data['날짜'] = coin_data['날짜'].apply(convert_date)

# 날짜 데이터 변환
coin_data['날짜'] = pd.to_datetime(coin_data['날짜'], format='%Y%m')
coin_data['날짜'] = coin_data['날짜'].dt.strftime('%Y-%m')
coin_data

# '종가' 열 값에서 쉼표 제거하고 float로 변환
coin_data['종가'] = coin_data['종가'].str.replace(',', '').astype(float)

# 날짜 기준 오름차순으로 정렬
coin_data.sort_values(by='날짜', ascending=True, inplace=True)

# 인덱스 재정렬
coin_data.reset_index(drop=True, inplace = True)

coin_data

# 코스닥데이터 가져오기
csv_file_path = '/content/drive/MyDrive/2023데이터청년캠퍼스/코스닥시세추이.csv'

# CSV 파일 읽어오기
kosdaq_data = pd.read_csv(csv_file_path, encoding='CP949')

# 가져온 데이터를 확인
kosdaq_data

# '일자' 열을 datetime 형식으로 변환
kosdaq_data['일자'] = pd.to_datetime(kosdaq_data['일자'])

# '일자' 열에서 연도와 월을 추출하여 문자열로 합치기
kosdaq_data['날짜'] = kosdaq_data['일자'].dt.strftime('%Y-%m')

# '연도월' 열을 기준으로 그룹화하여 평균 종가 계산
kosdaq_data = kosdaq_data.groupby('날짜')['종가'].mean()

# 결과를 데이터프레임으로 변환
kosdaq_data = kosdaq_data.reset_index()

kosdaq_data

# 코스닥데이터 가져오기
csv_file_path = '/content/drive/MyDrive/2023데이터청년캠퍼스/코스피시세추이.csv'

# CSV 파일 읽어오기
kospi_data = pd.read_csv(csv_file_path, encoding='CP949')

# 가져온 데이터를 확인
kospi_data

# '일자' 열을 datetime 형식으로 변환
kospi_data['일자'] = pd.to_datetime(kospi_data['일자'])

# '일자' 열에서 연도와 월을 추출하여 문자열로 합치기
kospi_data['날짜'] = kospi_data['일자'].dt.strftime('%Y-%m')

# '연도월' 열을 기준으로 그룹화하여 평균 종가 계산
kospi_data = kospi_data.groupby('날짜')['종가'].mean()

# 결과를 데이터프레임으로 변환
kospi_data = kospi_data.reset_index()

kospi_data

import os
import pandas as pd

# 파일이 있는 최상위 폴더 경로를 지정합니다.
base_folder = '/content'  # 기본 폴더 경로를 지정하세요.

# 'KCB_CREDTINFO4'로 시작하는 파일들을 저장할 빈 리스트를 생성합니다.
matching_files = []
i = 0
# 모든 폴더를 순회하면서 'KCB_CREDTINFO4'로 시작하는 파일들을 찾습니다.
for root, dirs, files in os.walk(base_folder):
    for file_name in files:
        if file_name.startswith('KCB_CREDTINFO_2'):
            file_path = os.path.join(root, file_name)
            matching_files.append(file_path)
            print(file_name, '을 추가하였습니다.')
            i = i + 1
print('합친 파일의 개수:', i)

# CSV 파일들을 하나로 합치기 위한 빈 DataFrame을 생성합니다.
data = pd.DataFrame()

# 각 파일을 읽어서 DataFrame에 추가합니다.
for file_path in matching_files:
    df = pd.read_csv(file_path)
    data = pd.concat([data, df], ignore_index=True)

# 필요한 작업이 완료된 후에 combined_df를 사용합니다.
# 예시: combined_df.to_csv('combined_file.csv', index=False)

# 파일 요약 정보 확인
data.info()

# 파일 5개 항목 확인
data.head()

"""# 데이터 전처리"""

# 생략 된 결과를 보기 위한 옵션 설정
pd.set_option('display.max_rows', None)

# 파일 결측값 확인
data.isna().sum()

# 파일 결측값 삭제
#data.dropna(axis=0, inplace=True)

# 파일 결측값 재확인
data.isnull().sum()

# 옵션 원상복구
pd.set_option('display.max_rows', 10)

# 인덱스 재정렬
data.reset_index(drop=True, inplace = True)

# 데이터 확인
data

# 행정동코드만 리스트로 추출
dong_codes = dong_data['행정동코드'].tolist()

# 행정동코드로 필터링하여 충남 데이터만 추출
data = data[data['DONG_CD'].isin(dong_codes)]
data

"""# 연도별 월소득 평균 분석

### 연도별 월평균 소득
"""

# 필요한 데이터 추출
incm = data[['CRTR_YM', 'MM_INCM', 'MM_INCM_200D', 'MM_INCM_200U_300D', 'MM_INCM_300U_400D', 'MM_INCM_400U_500D', 'MM_INCM_500U_600D', 'MM_INCM_600U_700D', 'MM_INCM_700U_800D', 'MM_INCM_800U_900D', 'MM_INCM_900U_1000D', 'MM_INCM_1000U']]
incm

# 'CRTR_YM' 열에서 연도를 추출하여 새로운 'Year' 열을 생성합니다.
incm['Year'] = incm['CRTR_YM'] // 100

# 연도별로 그룹화하고 'MM_INCM' 열의 평균을 구합니다.
mm_incm = incm.groupby('Year')['MM_INCM'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm = mm_incm.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm = mm_incm.reset_index()

mm_incm

import matplotlib.pyplot as plt

plt.plot(mm_incm['Year'], mm_incm['MM_INCM'], marker='o') # 선그래프 생성

plt.xlabel('년도')
plt.ylabel('월소득 평균(단위:천원)')
plt.title('average',fontsize=10) # 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(200만원 이하)"""

# 필요한 데이터 추출
incm_200D = data[['CRTR_YM', 'MM_INCM_200D']]
incm_200D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_200D = incm.groupby('Year')['MM_INCM_200D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_200D = mm_incm_200D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_200D = mm_incm_200D.reset_index()

mm_incm_200D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_200D['Year'], mm_incm_200D['MM_INCM_200D']) ## 선그래프 생성

plt.title('200 DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월 평균 소득 증가율(200만원-300만원)"""

# 필요한 데이터 추출
incm_200U_300D = data[['CRTR_YM', 'MM_INCM_200U_300D']]
incm_200U_300D

# 연도별로 그룹화하고 'MM_INCM_200U_300D' 열의 평균을 구합니다.
mm_incm_200U_300D = incm.groupby('Year')['MM_INCM_200U_300D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_200U_300D = mm_incm_200U_300D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_200U_300D = mm_incm_200U_300D.reset_index()

mm_incm_200U_300D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_200U_300D['Year'], mm_incm_200U_300D['MM_INCM_200U_300D']) ## 선그래프 생성

plt.title('200UP - 300DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(300만원-400만원)"""

# 필요한 데이터 추출
incm_300U_400D = data[['CRTR_YM', 'MM_INCM_300U_400D']]
incm_300U_400D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_300U_400D = incm.groupby('Year')['MM_INCM_300U_400D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_300U_400D = mm_incm_300U_400D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_300U_400D = mm_incm_300U_400D.reset_index()

mm_incm_300U_400D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_300U_400D['Year'], mm_incm_300U_400D['MM_INCM_300U_400D']) ## 선그래프 생성

plt.title('300UP - 400DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(400만원-500만원)"""

# 필요한 데이터 추출
incm_400U_500D = data[['CRTR_YM', 'MM_INCM_400U_500D']]
incm_400U_500D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_400U_500D = incm.groupby('Year')['MM_INCM_400U_500D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_400U_500D = mm_incm_400U_500D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_400U_500D = mm_incm_400U_500D.reset_index()

mm_incm_400U_500D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_400U_500D['Year'], mm_incm_400U_500D['MM_INCM_400U_500D']) ## 선그래프 생성

plt.title('400UP - 500DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(500만원-600만원)"""

# 필요한 데이터 추출
incm_500U_600D = data[['CRTR_YM', 'MM_INCM_500U_600D']]
incm_500U_600D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_500U_600D = incm.groupby('Year')['MM_INCM_500U_600D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_500U_600D = mm_incm_500U_600D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_500U_600D = mm_incm_500U_600D.reset_index()

mm_incm_500U_600D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_500U_600D['Year'], mm_incm_500U_600D['MM_INCM_500U_600D']) ## 선그래프 생성

plt.title('500UP - 600DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(600만원-700만원)"""

# 필요한 데이터 추출
incm_600U_700D = data[['CRTR_YM', 'MM_INCM_600U_700D']]
incm_600U_700D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_600U_700D = incm.groupby('Year')['MM_INCM_600U_700D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_600U_700D = mm_incm_600U_700D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_600U_700D = mm_incm_600U_700D.reset_index()

mm_incm_600U_700D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_600U_700D['Year'], mm_incm_600U_700D['MM_INCM_600U_700D']) ## 선그래프 생성

plt.title('600UP - 700DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(700만원-800만원)"""

# 필요한 데이터 추출
incm_700U_800D = data[['CRTR_YM', 'MM_INCM_700U_800D']]
incm_700U_800D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_700U_800D = incm.groupby('Year')['MM_INCM_700U_800D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_700U_800D = mm_incm_700U_800D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_700U_800D = mm_incm_700U_800D.reset_index()

mm_incm_700U_800D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_700U_800D['Year'], mm_incm_700U_800D['MM_INCM_700U_800D']) ## 선그래프 생성

plt.title('700UP - 800DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(800만원-900만원)"""

# 필요한 데이터 추출
incm_800U_900D = data[['CRTR_YM', 'MM_INCM_800U_900D']]
incm_800U_900D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_800U_900D = incm.groupby('Year')['MM_INCM_800U_900D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_800U_900D = mm_incm_800U_900D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_800U_900D = mm_incm_800U_900D.reset_index()

mm_incm_800U_900D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_800U_900D['Year'], mm_incm_800U_900D['MM_INCM_800U_900D']) ## 선그래프 생성

plt.title('800UP - 900DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""### 월평균 소득 증가율(900만원-1000만원)"""

# 필요한 데이터 추출
incm_900U_1000D = data[['CRTR_YM', 'MM_INCM_900U_1000D']]
incm_900U_1000D

# 연도별로 그룹화하고 'MM_INCM_200D' 열의 평균을 구합니다.
mm_incm_900U_1000D = incm.groupby('Year')['MM_INCM_900U_1000D'].mean()

# year을 데이터 프레임으로 변환합니다.
mm_incm_900U_1000D = mm_incm_900U_1000D.to_frame()

# 'Year' 열을 인덱스에서 열로 옮깁니다.
mm_incm_900U_1000D = mm_incm_900U_1000D.reset_index()

mm_incm_900U_1000D

fig = plt.figure(figsize=(5,5)) ## 캔버스 생성
ax = fig.add_subplot() ## 그림 뼈대(프레임) 생성

ax.plot(mm_incm_900U_1000D['Year'], mm_incm_900U_1000D['MM_INCM_900U_1000D']) ## 선그래프 생성

plt.title('900UP - 1000DOWN',fontsize=10) ## 타이틀 설정
plt.show()

"""## 소득 구간별 증가율 비교"""

plt.plot(mm_incm['Year'], mm_incm['MM_INCM'])
plt.plot(mm_incm_200D['Year'], mm_incm_200D['MM_INCM_200D'])
plt.plot(mm_incm_200U_300D['Year'], mm_incm_200U_300D['MM_INCM_200U_300D'])
plt.plot(mm_incm_300U_400D['Year'], mm_incm_300U_400D['MM_INCM_300U_400D'])
plt.plot(mm_incm_400U_500D['Year'], mm_incm_400U_500D['MM_INCM_400U_500D'])
plt.plot(mm_incm_500U_600D['Year'], mm_incm_500U_600D['MM_INCM_500U_600D'])
plt.plot(mm_incm_600U_700D['Year'], mm_incm_600U_700D['MM_INCM_600U_700D'])
plt.plot(mm_incm_700U_800D['Year'], mm_incm_700U_800D['MM_INCM_700U_800D'])
plt.plot(mm_incm_800U_900D['Year'], mm_incm_800U_900D['MM_INCM_800U_900D'])
plt.plot(mm_incm_900U_1000D['Year'], mm_incm_900U_1000D['MM_INCM_900U_1000D']) ## 선그래프 생성

plt.title('900UP - 1000DOWN',fontsize=10) ## 타이틀 설정
plt.show()

# concat을 사용하여 데이터 병합
# 소득율 비교하기 위해 천의 자리 수 제거
mm = pd.concat([mm_incm['Year'], mm_incm_200D[['MM_INCM_200D']].applymap(lambda x: x - 1000), mm_incm_200U_300D[['MM_INCM_200U_300D']].applymap(lambda x: x - 2000),
                mm_incm_300U_400D[['MM_INCM_300U_400D']].applymap(lambda x: x - 3000), mm_incm_400U_500D[['MM_INCM_400U_500D']].applymap(lambda x: x - 4000),
                mm_incm_500U_600D[['MM_INCM_500U_600D']].applymap(lambda x: x - 5000), mm_incm_600U_700D[['MM_INCM_600U_700D']].applymap(lambda x: x - 6000),
                mm_incm_700U_800D[['MM_INCM_700U_800D']].applymap(lambda x: x - 7000), mm_incm_800U_900D[['MM_INCM_800U_900D']].applymap(lambda x: x - 8000),
                mm_incm_900U_1000D[['MM_INCM_900U_1000D']].applymap(lambda x: x - 9000)], axis=1)

mm

#plt.plot(mm['Year'], mm['MM_INCM_200D'], marker='o', linestyle='-', label='200D')
plt.plot(mm['Year'], mm['MM_INCM_200U_300D'], marker='o', linestyle='-', label='200U_300D')
plt.plot(mm['Year'], mm['MM_INCM_300U_400D'], marker='o', linestyle='-', label='300U_400D')
plt.plot(mm['Year'], mm['MM_INCM_400U_500D'], marker='o', linestyle='-', label='400U_500D')
plt.plot(mm['Year'], mm['MM_INCM_500U_600D'], marker='o', linestyle='-', label='500U_600D')
plt.plot(mm['Year'], mm['MM_INCM_600U_700D'], marker='o', linestyle='-', label='600U_700D')
plt.plot(mm['Year'], mm['MM_INCM_700U_800D'], marker='o', linestyle='-', label='700U_800D')
plt.plot(mm['Year'], mm['MM_INCM_800U_900D'], marker='o', linestyle='-', label='800U_900D')
plt.plot(mm['Year'], mm['MM_INCM_900U_1000D'], marker='o', linestyle='-', label='900U_1000D')

plt.title('MM_INCM')
plt.xlabel('Year')
plt.ylabel('INCM')
plt.legend()

"""# 분기별 월소득 평균 분석"""

quarter = data[['CRTR_YM', 'MM_INCM', 'MM_INCM_200D', 'MM_INCM_200U_300D', 'MM_INCM_300U_400D', 'MM_INCM_400U_500D', 'MM_INCM_500U_600D', 'MM_INCM_600U_700D', 'MM_INCM_700U_800D', 'MM_INCM_800U_900D', 'MM_INCM_900U_1000D', 'MM_INCM_1000U']]
quarter

# 'CRTR_YM' 열을 문자열로 변환
quarter['CRTR_YM'] = quarter['CRTR_YM'].astype(str)

# 연도와 월을 추출하여 분기를 계산
quarter['Year'] = quarter['CRTR_YM'].str[:4].astype(int)
quarter['Month'] = quarter['CRTR_YM'].str[4:].astype(int)
quarter['Quarter'] = ((quarter['Month'] - 1) // 3) + 1

# 분기별로 데이터 추출 (202001)
#quarter_data = quarter[(quarter['Year'] == 2020) & (quarter['Quarter'] == 1)]
#quarter_data

# 필요없는 'Month'을 제거
quarter.drop('Month', axis=1, inplace=True)

# 데이터 확인
quarter

# 분기별로 그룹화한 후 평균 계산
quarter_avg = quarter.groupby(['Year', 'Quarter']).mean()
quarter_avg

"""### 2016년"""

# 2016년만 추출
quarter_2016 = quarter_avg.loc[2016]
quarter_2016

# 인덱스를 열로 변환
quarter_2016 = quarter_2016.reset_index()

# 2016년 분기별 월소득 평균 시각화
plt.plot(quarter_2016['Quarter'], quarter_2016['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2016',fontsize=10) # 타이틀 설정
plt.show()

"""### 2017년"""

# 2017년만 추출
quarter_2017 = quarter_avg.loc[2017]
quarter_2017

# 인덱스를 열로 변환
quarter_2017 = quarter_2017.reset_index()

# 2017년 분기별 월소득 평균 시각화
plt.plot(quarter_2017['Quarter'], quarter_2017['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2017',fontsize=10) # 타이틀 설정
plt.show()

"""### 2018년"""

# 2018년만 추출
quarter_2018 = quarter_avg.loc[2018]
quarter_2018

# 인덱스를 열로 변환
quarter_2018 = quarter_2018.reset_index()

# 2018년 분기별 월소득 평균 시각화
plt.plot(quarter_2018['Quarter'], quarter_2018['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2018',fontsize=10) # 타이틀 설정
plt.show()

"""### 2019년"""

# 2019년만 추출
quarter_2019 = quarter_avg.loc[2019]
quarter_2019

# 인덱스를 열로 변환
quarter_2019 = quarter_2019.reset_index()

# 2019년 분기별 월소득 평균 시각화
plt.plot(quarter_2019['Quarter'], quarter_2019['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2019',fontsize=10) # 타이틀 설정
plt.show()

"""### 2020년"""

# 2020년만 추출
quarter_2020 = quarter_avg.loc[2020]
quarter_2020

# 인덱스를 열로 변환
quarter_2020 = quarter_2020.reset_index()

# 2020년 분기별 월소득 평균 시각화
plt.plot(quarter_2020['Quarter'], quarter_2020['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2020',fontsize=10) # 타이틀 설정
plt.show()

"""### 2021년"""

# 2021년만 추출
quarter_2021 = quarter_avg.loc[2021]
quarter_2021

# 인덱스를 열로 변환
quarter_2021 = quarter_2021.reset_index()

# 2021년 분기별 월소득 평균 시각화
plt.plot(quarter_2021['Quarter'], quarter_2021['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2021',fontsize=10) # 타이틀 설정
plt.show()

"""### 2022년"""

# 2022년만 추출
quarter_2022 = quarter_avg.loc[2022]
quarter_2022

# 인덱스를 열로 변환
quarter_2022 = quarter_2022.reset_index()

# 2022년 분기별 월소득 평균 시각화
plt.plot(quarter_2022['Quarter'], quarter_2022['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2022',fontsize=10) # 타이틀 설정
plt.show()

"""### 2023년"""

# 2023년만 추출
quarter_2023 = quarter_avg.loc[2023]
quarter_2023

# 인덱스를 열로 변환
quarter_2023 = quarter_2023.reset_index()

# 2023년 분기별 월소득 평균 시각화
plt.plot(quarter_2023['Quarter'], quarter_2023['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')

plt.title('2023',fontsize=10) # 타이틀 설정
plt.show()

"""### 분기별 월소득 평균 총 비교"""

plt.rc('font', family='NanumBarunGothic')
plt.figure(figsize=(5, 7))

plt.plot(quarter_2016['Quarter'], quarter_2016['MM_INCM'], marker='o', linestyle='-', label='2016')
plt.plot(quarter_2017['Quarter'], quarter_2017['MM_INCM'], marker='o', linestyle='-', label='2017')
plt.plot(quarter_2018['Quarter'], quarter_2018['MM_INCM'], marker='o', linestyle='-', label='2018')
plt.plot(quarter_2019['Quarter'], quarter_2019['MM_INCM'], marker='o', linestyle='-', label='2019')
plt.plot(quarter_2020['Quarter'], quarter_2020['MM_INCM'], marker='o', linestyle='-', label='2020')
plt.plot(quarter_2021['Quarter'], quarter_2021['MM_INCM'], marker='o', linestyle='-', label='2021')
plt.plot(quarter_2022['Quarter'], quarter_2022['MM_INCM'], marker='o', linestyle='-', label='2022')
plt.plot(quarter_2023['Quarter'], quarter_2023['MM_INCM'], marker='o', linestyle='-', label='2023')

plt.xlabel('분기')
plt.ylabel('월소득 평균(단위:천원)')
plt.grid(True)
plt.legend(bbox_to_anchor=(1.25, 0.7))
plt.show()

"""# 시기별 월소득 평균 분석

## 코로나(전/중/후)

### 코로나 전
"""

# 필요한 데이터만 추출
covid = data[['CRTR_YM', 'MM_INCM']]
covid

# 'CRTR_YM' 열을 문자열로 변환
covid['CRTR_YM'] = covid['CRTR_YM'].astype(str)

# 연도와 월을 추출하여 분기를 계산
covid['Year'] = covid['CRTR_YM'].str[:4].astype(int)
covid['Month'] = covid['CRTR_YM'].str[4:].astype(int)

# 코로나 전 데이터(2020년 1월)까지 데이터를 추출
covid_1 = covid[(covid['Year'] < 2020) | ((covid['Year'] == 2020) & (covid['Month'] <= 1))]

# 인덱스 재정렬
covid_1.reset_index(drop=True, inplace = True)
covid_1

# 연월 기준으로 그룹화 후 평균 계산
covid_1_avg = covid_1.groupby(['CRTR_YM']).mean()
covid_1_avg

# 인덱스를 열로 변환
covid_1_avg = covid_1_avg.reset_index()

# 코로나 전 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(covid_1_avg['CRTR_YM'], covid_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201601 - 202001 covid before',fontsize=10) # 타이틀 설정
plt.xticks(rotation=90) # x축 글씨 세로로 적용
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

"""### 코로나 중"""

# 코로나 중 데이터(2020년 2월~2022년 4월)까지 데이터를 추출
covid_2 = covid[
    ((covid['Year'] == 2020) & (covid['Month'] >= 2)) |  # 20년 2월 이후 데이터
    ((covid['Year'] > 2020) & (covid['Year'] < 2022)) |  # 21년 데이터
    ((covid['Year'] == 2022) & (covid['Month'] <= 4))    # 22년 4월까지 데이터
]

# 인덱스 재정렬
covid_2.reset_index(drop=True, inplace = True)
covid_2

# 연월 기준으로 그룹화 후 평균 계산
covid_2_avg = covid_2.groupby(['CRTR_YM']).mean()
covid_2_avg

# 인덱스를 열로 변환
covid_2_avg = covid_2_avg.reset_index()

# 코로나 중 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(covid_2_avg['CRTR_YM'], covid_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202002 - 202204 during covid19',fontsize=10) # 타이틀 설정
plt.xticks(rotation=10) # x축 글씨 세로로 적용
plt.ylim(2500, 2900)
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

"""### 코로나 후"""

# 코로나 후 데이터(2022년 5월~2023년 4월)까지 데이터를 추출
covid_3 = covid[
    ((covid['Year'] == 2022) & (covid['Month'] >= 5)) |  # 22년 5월 이후 데이터
    ((covid['Year'] == 2023) & (covid['Month'] <= 4))    # 23년 4월까지 데이터
]

# 인덱스 재정렬
covid_3.reset_index(drop=True, inplace = True)
covid_3

# 연월 기준으로 그룹화 후 평균 계산
covid_3_avg = covid_3.groupby(['CRTR_YM']).mean()
covid_3_avg

# 인덱스를 열로 변환
covid_3_avg = covid_3_avg.reset_index()

# 코로나 전 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(covid_3_avg['CRTR_YM'], covid_3_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202205 - 202304 after covid19',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

# 그래프로 시각화
from matplotlib.ticker import MultipleLocator

plt.figure(figsize=(20, 5))
plt.plot(covid_1_avg['CRTR_YM'], covid_1_avg['MM_INCM'], marker='o', linestyle='-', label='코로나 전 월소득 평균')
plt.plot(covid_2_avg['CRTR_YM'], covid_2_avg['MM_INCM'], marker='o', linestyle='-', label='코로나 중 월소득 평균')
plt.plot(covid_3_avg['CRTR_YM'], covid_3_avg['MM_INCM'], marker='o', linestyle='-', label='코로나 전 월소득 평균')
plt.xlabel('년도')
plt.ylabel('월소득 평균(단위:천 원)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('202002', color='blue', linestyle='--', label='코로나 발생')
plt.axvline('202204', color='purple', linestyle='--', label='일상 회복')

bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(covid_1_avg)):
    if covid_1_avg['CRTR_YM'][i] == '201812':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if covid_1_avg['CRTR_YM'][i] == '201901':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.grid()
plt.legend()
plt.show()

"""## 주가(코스닥)

### 주가(코스닥) 인상
"""

kosdaq = data[['CRTR_YM', 'MM_INCM']]
kosdaq

# 'CRTR_YM' 열을 문자열로 변환
kosdaq['CRTR_YM'] = kosdaq['CRTR_YM'].astype(str)

# 연도와 월을 추출하여 분기를 계산
kosdaq['Year'] = kosdaq['CRTR_YM'].str[:4].astype(int)
kosdaq['Month'] = kosdaq['CRTR_YM'].str[4:].astype(int)


# 코스닥 인상 데이터(2017년 1월~2018년 1월)까지 데이터를 추출
kosdaq_up_1 = kosdaq[
    ((kosdaq['Year'] == 2017) & (kosdaq['Month'] >= 1)) |  # 17년 1월 이후 데이터
    ((kosdaq['Year'] == 2018) & (kosdaq['Month'] <= 1))    # 18년 1월까지 데이터
]

# 코스닥 인상 데이터(2020년 1월~2021년 10월)까지 데이터를 추출
kosdaq_up_2 = kosdaq[
    ((kosdaq['Year'] == 2020) & (kosdaq['Month'] >= 1)) |   # 20년 1월 이후 데이터
    ((kosdaq['Year'] == 2021) & (kosdaq['Month'] <= 10))    # 21년 10월까지 데이터
]

# 코스닥 인상 데이터(2022년 7월~2023년 4월)까지 데이터를 추출
kosdaq_up_3 = kosdaq[
    ((kosdaq['Year'] == 2022) & (kosdaq['Month'] >= 7)) |  # 22년 7월 이후 데이터
    ((kosdaq['Year'] == 2023) & (kosdaq['Month'] <= 4))    # 23년 4월까지 데이터
]

# 인덱스 재정렬
kosdaq_up_1.reset_index(drop=True, inplace = True)
kosdaq_up_1

kosdaq_up_2.reset_index(drop=True, inplace = True)
#kosdaq_up_2

kosdaq_up_3.reset_index(drop=True, inplace = True)
#kosdaq_up_3

# 연월을 기준으로 그룹화 후 평균 계산
kosdaq_up_1_avg = kosdaq_up_1.groupby('CRTR_YM').mean()
#kosdaq_up_1_avg

kosdaq_up_2_avg = kosdaq_up_2.groupby('CRTR_YM').mean()
#kosdaq_up_2_avg

kosdaq_up_3_avg = kosdaq_up_3.groupby('CRTR_YM').mean()
kosdaq_up_3_avg

# 인덱스를 열로 변환
kosdaq_up_1_avg = kosdaq_up_1_avg.reset_index()

kosdaq_up_2_avg = kosdaq_up_2_avg.reset_index()

kosdaq_up_3_avg = kosdaq_up_3_avg.reset_index()

# 코스닥 인상 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(kosdaq_up_1_avg['CRTR_YM'], kosdaq_up_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201701 - 201801 KOSDAQ increase',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kosdaq_up_2_avg['CRTR_YM'], kosdaq_up_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202001 - 202110 KOSDAQ increase',fontsize=10) # 타이틀 설정
plt.ylim(2500, 2800)
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kosdaq_up_3_avg['CRTR_YM'], kosdaq_up_3_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202207 - 202304 KOSDAQ increase',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

# 시각화 방법2 -subplots 사용
fig, ax = plt.subplots(3, 1, figsize=(20, 15))

ax[0].plot(kosdaq_up_1_avg['CRTR_YM'], kosdaq_up_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
ax[0].set_title('201701 - 201801 KOSDAQ increase', fontsize=10)

ax[1].plot(kosdaq_up_2_avg['CRTR_YM'], kosdaq_up_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
ax[1].set_title('202001 - 202101 KOSDAQ increase', fontsize=10)

ax[2].plot(kosdaq_up_3_avg['CRTR_YM'], kosdaq_up_3_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
ax[2].set_title('202101 - 202201 KOSDAQ increase', fontsize=10)

plt.tight_layout()
plt.show()

"""### 주가(코스닥) 인하"""

# 코스닥 인하 데이터(2016년 01월~2017년 01월)까지 데이터를 추출
kosdaq_down_1 = kosdaq[
    ((kosdaq['Year'] == 2016) & (kosdaq['Month'] >= 1)) |  # 16년 1월 이후 데이터
    ((kosdaq['Year'] == 2017) & (kosdaq['Month'] <= 1))    # 17년 1월까지 데이터
]

# 코스닥 인하 데이터(2018년 01월~2020년 01월)까지 데이터를 추출
kosdaq_down_2 = kosdaq[
    ((kosdaq['Year'] == 2018) & (kosdaq['Month'] >= 1)) |   # 18년 1월 이후 데이터
    (kosdaq['Year'] == 2019) | # 19년 모든 데이터
    ((kosdaq['Year'] == 2020) & (kosdaq['Month'] <= 1))    # 20년 1월까지 데이터
]

# 코스닥 인하 데이터(2021년 10월~2022년07월)까지 데이터를 추출
kosdaq_down_3 = kosdaq[
    ((kosdaq['Year'] == 2021) & (kosdaq['Month'] >= 10)) |  # 21년 10월 이후 데이터
    ((kosdaq['Year'] == 2022) & (kosdaq['Month'] <= 7))    # 22년 7월까지 데이터
]

# 인덱스 재정렬
kosdaq_down_1.reset_index(drop=True, inplace = True)
kosdaq_down_1

kosdaq_down_2.reset_index(drop=True, inplace = True)
#kosdaq_down_2

kosdaq_down_3.reset_index(drop=True, inplace = True)
#kosdaq_down_3

# 연월을 기준으로 그룹화 후 평균 계산
kosdaq_down_1_avg = kosdaq_down_1.groupby('CRTR_YM').mean()
#kosdaq_down_1_avg

kosdaq_down_2_avg = kosdaq_down_2.groupby('CRTR_YM').mean()
#kosdaq_down_2_avg

kosdaq_down_3_avg = kosdaq_down_3.groupby('CRTR_YM').mean()
kosdaq_down_3_avg

# 인덱스를 열로 변환
kosdaq_down_1_avg = kosdaq_down_1_avg.reset_index()

kosdaq_down_2_avg = kosdaq_down_2_avg.reset_index()

kosdaq_down_3_avg = kosdaq_down_3_avg.reset_index()

# 코스닥 인상 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(kosdaq_down_1_avg['CRTR_YM'], kosdaq_down_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201601 - 201701 KOSDAQ reduction',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kosdaq_down_2_avg['CRTR_YM'], kosdaq_down_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201801 - 202001 KOSDAQ reduction',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kosdaq_down_3_avg['CRTR_YM'], kosdaq_down_3_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202110 - 202207 KOSDAQ reduction',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

# 그래프로 시각화
plt.figure(figsize=(20, 5))
plt.plot(kosdaq_down_1_avg['CRTR_YM'], kosdaq_down_1_avg['MM_INCM'], marker='o', linestyle='-', color='red', label='코스닥 인하')
plt.plot(kosdaq_up_1_avg['CRTR_YM'], kosdaq_up_1_avg['MM_INCM'], marker='o', linestyle='-', color='blue', label='코스닥 인상')
plt.plot(kosdaq_down_2_avg['CRTR_YM'], kosdaq_down_2_avg['MM_INCM'], marker='o', linestyle='-', color='red')
plt.plot(kosdaq_up_2_avg['CRTR_YM'], kosdaq_up_2_avg['MM_INCM'], marker='o', linestyle='-', color='blue')
plt.plot(kosdaq_down_3_avg['CRTR_YM'], kosdaq_down_3_avg['MM_INCM'], marker='o', linestyle='-', color='red')
plt.plot(kosdaq_up_3_avg['CRTR_YM'], kosdaq_up_3_avg['MM_INCM'], marker='o', linestyle='-', color='blue')

plt.xlabel('년도')
plt.ylabel('월소득 평균(단위:천 원)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(covid_1_avg)):
    if covid_1_avg['CRTR_YM'][i] == '201812':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if covid_1_avg['CRTR_YM'][i] == '201901':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.grid()
plt.legend()
plt.show()

"""## 주가(코스피)

### 주가(코스피) 인상
"""

kospi = data[['CRTR_YM', 'MM_INCM']]
kospi

# 'CRTR_YM' 열을 문자열로 변환
kospi['CRTR_YM'] = kospi['CRTR_YM'].astype(str)

# 연도와 월을 추출하여 분기를 계산
kospi['Year'] = kospi['CRTR_YM'].str[:4].astype(int)
kospi['Month'] = kospi['CRTR_YM'].str[4:].astype(int)


# 코스피 인상 데이터(2016년 01월~2017년 10월)까지 데이터를 추출
kospi_up_1 = kospi[
    ((kospi['Year'] == 2016) & (kospi['Month'] >= 1)) |   # 16년 1월 이후 데이터
    ((kospi['Year'] == 2017) & (kospi['Month'] <= 10))    # 17년 10월까지 데이터
]

# 코스피 인상 데이터(2020년 01월~2021년 04월)까지 데이터를 추출
kospi_up_2 = kospi[
    ((kospi['Year'] == 2020) & (kospi['Month'] >= 1)) |   # 20년 1월 이후 데이터
    ((kospi['Year'] == 2021) & (kospi['Month'] <= 4))     # 21년 4월까지 데이터
]

# 코스피 인상 데이터(2022년 07월~2023년 4월)까지 데이터를 추출
kospi_up_3 = kospi[
    ((kospi['Year'] == 2022) & (kospi['Month'] >= 7)) |  # 22년 7월 이후 데이터
    ((kospi['Year'] == 2023) & (kospi['Month'] <= 4))    # 23년 4월까지 데이터
]

# 인덱스 재정렬
kospi_up_1.reset_index(drop=True, inplace = True)
kospi_up_1

kospi_up_2.reset_index(drop=True, inplace = True)
#kospi_up_2

kospi_up_3.reset_index(drop=True, inplace = True)
#kospi_up_3

# 연월을 기준으로 그룹화 후 평균 계산
kospi_up_1_avg = kospi_up_1.groupby('CRTR_YM').mean()
#kospi_up_1_avg

kospi_up_2_avg = kospi_up_2.groupby('CRTR_YM').mean()
#kospi_up_2_avg

kospi_up_3_avg = kospi_up_3.groupby('CRTR_YM').mean()
kospi_up_3_avg

# 인덱스를 열로 변환
kospi_up_1_avg = kospi_up_1_avg.reset_index()

kospi_up_2_avg = kospi_up_2_avg.reset_index()

kospi_up_3_avg = kospi_up_3_avg.reset_index()

# 코스피 인상 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(kospi_up_1_avg['CRTR_YM'], kospi_up_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201601 - 201710 KOSOPI increase',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kospi_up_2_avg['CRTR_YM'], kospi_up_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202001 - 202104 KOSOPI increase',fontsize=10)
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kospi_up_3_avg['CRTR_YM'], kospi_up_3_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202207 - 202304 KOSOPI increase',fontsize=10)
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

"""### 주가(코스피) 인하"""

# 코스피 인하 데이터(2017년 10월~2020년 01월)까지 데이터를 추출
kospi_down_1 = kospi[
    ((kospi['Year'] == 2017) & (kospi['Month'] >= 10)) |   # 17년 10월 이후 데이터
    (kospi['Year'] == 2018) |  # 18년 모든 데이터
    (kospi['Year'] == 2019) |  # 19년 모든 데이터
    ((kospi['Year'] == 2020) & (kospi['Month'] <= 1))      # 20년 1월까지 데이터
]

# 코스피 인하 데이터(2021년 04월~2022년 07월)까지 데이터를 추출
kospi_down_2 = kospi[
    ((kospi['Year'] == 2021) & (kospi['Month'] >= 4)) |   # 21년 4월 이후 데이터
    ((kospi['Year'] == 2022) & (kospi['Month'] <= 7))     # 22년 7월까지 데이터
]

# 인덱스 재정렬
kospi_down_1.reset_index(drop=True, inplace = True)
#kospi_down_1

kospi_down_2.reset_index(drop=True, inplace = True)
#kospi_down_2

# 연월을 기준으로 그룹화 후 평균 계산
kospi_down_1_avg = kospi_down_1.groupby('CRTR_YM').mean()
#kospi_down_1_avg

kospi_down_2_avg = kospi_down_2.groupby('CRTR_YM').mean()
#kospi_down_2_avg

# 인덱스를 열로 변환
kospi_down_1_avg = kospi_down_1_avg.reset_index()

kospi_down_2_avg = kospi_down_2_avg.reset_index()

# 코스피 인하 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(kospi_down_1_avg['CRTR_YM'], kospi_down_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201601 - 201710 KOSOPI reduction',fontsize=10) # 타이틀 설정
plt.xticks(rotation=10) # x축 글씨 세로로 적용
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(kospi_down_2_avg['CRTR_YM'], kospi_down_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202001 - 202104 KOSOPI reduction',fontsize=10) # 타이틀 설정
plt.ylim(2650, 2800)
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

# 그래프로 시각화
plt.figure(figsize=(20, 5))
plt.plot(kospi_up_1_avg['CRTR_YM'], kospi_up_1_avg['MM_INCM'], marker='o', linestyle='-', color='blue', label='코스피 인상')
plt.plot(kospi_down_1_avg['CRTR_YM'], kospi_down_1_avg['MM_INCM'], marker='o', linestyle='-', color='red', label='코스피 인하')
plt.plot(kospi_up_2_avg['CRTR_YM'], kospi_up_2_avg['MM_INCM'], marker='o', linestyle='-', color='blue')
plt.plot(kospi_down_2_avg['CRTR_YM'], kospi_down_2_avg['MM_INCM'], marker='o', linestyle='-', color='red')
plt.plot(kospi_up_3_avg['CRTR_YM'], kospi_up_3_avg['MM_INCM'], marker='o', linestyle='-', color='blue')

plt.xlabel('년도')
plt.ylabel('월소득 평균(단위:천 원)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(covid_1_avg)):
    if covid_1_avg['CRTR_YM'][i] == '201812':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if covid_1_avg['CRTR_YM'][i] == '201901':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.grid()
plt.legend()
plt.show()

"""## 금리

### 금리 인상
"""

interestrate = data[['CRTR_YM', 'MM_INCM']]
interestrate

# 'CRTR_YM' 열을 문자열로 변환
interestrate['CRTR_YM'] = interestrate['CRTR_YM'].astype(str)

# 연도와 월을 추출하여 분기를 계산
interestrate['Year'] = interestrate['CRTR_YM'].str[:4].astype(int)
interestrate['Month'] = interestrate['CRTR_YM'].str[4:].astype(int)


# 금리 인상 데이터(2016년 6월~2018년 11월)까지 데이터를 추출
interestrate_up_1 = interestrate[
    ((interestrate['Year'] == 2016) & (interestrate['Month'] >= 6)) |   # 16년 6월 이후 데이터
    (interestrate['Year'] == 2017) |  # 17년 모든 데이터
    ((interestrate['Year'] == 2018) & (interestrate['Month'] <= 11))    # 18년 11월까지 데이터
]

# 금리 인상 데이터(2020년 5월~2023년 1월)까지 데이터를 추출
interestrate_up_2 = interestrate[
    ((interestrate['Year'] == 2020) & (interestrate['Month'] >= 5)) |   # 20년 5월 이후 데이터
    (interestrate['Year'] == 2022) |  # 22년 모든 데이터
    ((interestrate['Year'] == 2023) & (interestrate['Month'] <= 1))     # 23년 1월까지 데이터
]

# 인덱스 재정렬
interestrate_up_1.reset_index(drop=True, inplace = True)
#interestrate_up_1

interestrate_up_2.reset_index(drop=True, inplace = True)
#interestrate_up_2

# 연월을 기준으로 그룹화 후 평균 계산
interestrate_up_1_avg = interestrate_up_1.groupby('CRTR_YM').mean()
#interestrate_up_1_avg

interestrate_up_2_avg = interestrate_up_2.groupby('CRTR_YM').mean()
#interestrate_up_2_avg

# 인덱스를 열로 변환
interestrate_up_1_avg = interestrate_up_1_avg.reset_index()

interestrate_up_2_avg = interestrate_up_2_avg.reset_index()

# 금리 인상 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(interestrate_up_1_avg['CRTR_YM'], interestrate_up_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201606 - 201811 Interest rate hike',fontsize=10) # 타이틀 설정
plt.xticks(rotation=20) # x축 글씨 기울기
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(interestrate_up_2_avg['CRTR_YM'], interestrate_up_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('202108 - 202301 Interest rate hike',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

"""### 금리 인하"""

# 금리 인하 데이터(2016년 6월)까지 데이터를 추출
interestrate_down_1 = interestrate[
    ((interestrate['Year'] == 2016) & (interestrate['Month'] <= 6))    # 16년 6월까지 데이터
]

# 금리 인하 데이터(2018년 11월~2020년 5월)까지 데이터를 추출
interestrate_down_2 = interestrate[
    ((interestrate['Year'] == 2018) & (interestrate['Month'] >= 11)) |   # 18년 11월 이후 데이터
    (interestrate['Year'] == 2019) |  # 19년 모든 데이터
    ((interestrate['Year'] == 2020) & (interestrate['Month'] <= 5))     # 20년 5월까지 데이터
]

# 인덱스 재정렬
interestrate_down_1.reset_index(drop=True, inplace = True)
#interestrate_1

interestrate_down_2.reset_index(drop=True, inplace = True)
#interestrate_2

# 연월을 기준으로 그룹화 후 평균 계산
interestrate_down_1_avg = interestrate_down_1.groupby('CRTR_YM').mean()
#interestrate_down_1_avg

interestrate_down_2_avg = interestrate_down_2.groupby('CRTR_YM').mean()
#interestrate_down_2_avg

# 인덱스를 열로 변환
interestrate_down_1_avg = interestrate_down_1_avg.reset_index()

interestrate_down_2_avg = interestrate_down_2_avg.reset_index()

# 금리 인하 데이터 시각화
plt.figure(figsize=(20, 5))
plt.plot(interestrate_down_1_avg['CRTR_YM'], interestrate_down_1_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201601 - 201606 Interest rate cut',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

plt.figure(figsize=(20, 5))
plt.plot(interestrate_down_2_avg['CRTR_YM'], interestrate_down_2_avg['MM_INCM'], marker='o', linestyle='-', label='MM_INCM')
plt.title('201811 - 202005 Interest rate cut',fontsize=10) # 타이틀 설정
plt.rc('font', family='NanumBarunGothic')
plt.xlabel('연월')
plt.ylabel('월소득 평균(단위:천원)')
plt.show()

# 그래프로 시각화
plt.figure(figsize=(20, 5))
plt.plot(interestrate_down_1_avg['CRTR_YM'], interestrate_down_1_avg['MM_INCM'], marker='o', linestyle='-', color='red', label='금리 인하')
plt.plot(interestrate_up_1_avg['CRTR_YM'], interestrate_up_1_avg['MM_INCM'], marker='o', linestyle='-', color='blue', label='금리 인상')
plt.plot(interestrate_down_2_avg['CRTR_YM'], interestrate_down_2_avg['MM_INCM'], marker='o', linestyle='-', color='red')
plt.plot(interestrate_up_2_avg['CRTR_YM'], interestrate_up_2_avg['MM_INCM'], marker='o', linestyle='-', color='blue')


plt.xlabel('년도')
plt.ylabel('월소득 평균(단위:천 원)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(covid_1_avg)):
    if covid_1_avg['CRTR_YM'][i] == '201812':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if covid_1_avg['CRTR_YM'][i] == '201901':
        plt.annotate(str(covid_1_avg['MM_INCM'][i]), (covid_1_avg['CRTR_YM'][i], covid_1_avg['MM_INCM'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.grid()
plt.legend()
plt.show()

"""# 대출 연체자 수-남은 대출 금액 평균 상관분석"""

# 필요한 행만 추출
loan = data[['CRTR_YM', 'SHT_OVDU_NOPE', 'LNG_OVDU_NOPE', 'LON_AVG_BLC']]
loan

# 총(단기+장기) 연체자 수를 구하기
loan['SUM_OVDU_NOPE'] = loan['SHT_OVDU_NOPE'] + loan['LNG_OVDU_NOPE']
loan

# '날짜' 열을 datetime 형식으로 변환
loan['CRTR_YM'] = pd.to_datetime(loan['CRTR_YM'], format='%Y%m')
loan['CRTR_YM'] = loan['CRTR_YM'].dt.strftime('%Y-%m')
loan

# 연월 기준으로 그룹화 후 계산
loan_ovdu = loan.groupby('CRTR_YM')['SUM_OVDU_NOPE'].sum() # 총 연체자 수의 합
loan_blc = loan.groupby('CRTR_YM')['LON_AVG_BLC'].mean() # 대출 잔액 평균

# 데이터 프레임 만들기
loan_df = pd.DataFrame({'SUM_OVDU_NOPE': loan_ovdu, 'LON_AVG_BLC': loan_blc})

# 'Year' 열을 인덱스에서 열로 옮기기
loan_df = loan_df.reset_index()
loan_df

# 연도와 월을 추출
loan_df['Year'] = loan_df['CRTR_YM'].str[:4].astype(int)
loan_df

# 산점도 그리기
plt.scatter(loan_df['SUM_OVDU_NOPE'], loan_df['LON_AVG_BLC'], c=loan_df['SUM_OVDU_NOPE'])
plt.show()

# 그래프로 시각화
from matplotlib.ticker import MultipleLocator

plt.figure(figsize=(20, 5))
plt.bar(loan_df['CRTR_YM'], loan_df['LON_AVG_BLC'], color='pink', label='대출잔액평균')
plt.plot(loan_df['CRTR_YM'], loan_df['SUM_OVDU_NOPE'], marker='o', color='green', linestyle='--', label='총 연체자 수')
plt.xlabel('년도')
plt.ylabel('대출잔액평균/대출연체자수(단위:천원/명)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('2020-02', color='blue', linestyle='--', label='코로나 발생')
plt.axvline('2022-04', color='purple', linestyle='--', label='일상 회복')

bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(loan_df)):
    if loan_df['CRTR_YM'][i] == '2020-02':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if loan_df['CRTR_YM'][i] == '2022-04':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.legend()
plt.show()

# --> 대출잔액과 대출 연체자 수는 관계없이 대출잔액평균을 전체적으로 증가하고 있고 연체자수는 코로나 시기를 기점으로 변화가 있는 것을 확인할 수 있다.
# --> 코로나가 발생한 이후에 대출연체자 수가 감소하고 있으며, 코로나가 끝난 후 일상 회복에 들어간 시기부터 다시 증가하고 있다.
# --> 자본시장연구원 발간물에 따르면 코로나 기간에 개인투자자의 주식시장 참여 확대, 생활 및 주택자금 수요 증가 등으로 국내 가계부채가 빠르게 증가하고 있음. (http://www.kcmi.re.kr/publications/pub_detail_view?syear=2021&zcd=002001016&zno=1593&cno=5685)
# -->  코로나 자영업자 지원책으로 1% 대 저금리 대출을 받는 자영업자가 증가하면서 대출잔액은 상대적으로 단기간에 증가한 것으로 파악된다. (https://www.sedaily.com/NewsView/26CG6AK0UD)
# --> 기사(https://m.webzine.kacpta.or.kr/news/articleView.html?idxno=6467)에 따르면 코로나로 연체 위기에 빠진 개인과 자영업자에게 대출 원금 상환 유예를 해주었기 때문에 연체자의 수가 감소하고 있는 것으로 추측한다.
# --> 결과적으로 코로나 발생 이후 개인투자자의 주식시장 참여 확대, 생활 및 주택자금 수요 증가, 코로나 지원책 등으로 인해 대출 잔액은 상대적으로 급격하게 증가하고 있지만, 대출 원금 상환 유예로 인해 연체자의 수는 감소하고 있는 것으로 파악된다.

# 그래프로 시각화
from matplotlib.ticker import MultipleLocator

plt.figure(figsize=(20, 5))
plt.bar(loan_df['CRTR_YM'], loan_df['LON_AVG_BLC'], color='pink', label='대출잔액평균')
plt.plot(loan_df['CRTR_YM'], loan_df['SUM_OVDU_NOPE'], marker='o', color='green', linestyle='--', label='총 연체자 수')
plt.xlabel('년도')
plt.ylabel('대출잔액평균/대출연체자수(단위:천원/명)')

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('2017-12', color='blue', linestyle='--', label='비트코인 변곡점1')
plt.axvline('2019-07', color='red', linestyle='--', label='비트코인 변곡점2')
plt.axvline('2021-03', color='purple', linestyle='--', label='비트코인 변곡점3')
plt.axvline('2021-11', color='green', linestyle='--', label='비트코인 변곡점4')


bbox = dict( ## 텍스트 박스 스타일 지정
    boxstyle='square', # 박스 모양
    facecolor='white', # 박스 배경색
    alpha=0.6
)

# 특정 값에 대한 꼭짓점 표시
for i in range(len(loan_df)):
    if loan_df['CRTR_YM'][i] == '2017-12':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if loan_df['CRTR_YM'][i] == '2019-07':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if loan_df['CRTR_YM'][i] == '2021-03':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)
    if loan_df['CRTR_YM'][i] == '2021-11':
        plt.annotate(str(loan_df['SUM_OVDU_NOPE'][i]), (loan_df['CRTR_YM'][i], loan_df['SUM_OVDU_NOPE'][i]), textcoords="offset points", xytext=(0,10), ha='center', bbox=bbox)

plt.legend()
plt.show()

# -->

fig, ax1 = plt.subplots(figsize=(20, 5))

# 첫 번째 y축 (값1)
color = 'tab:blue'
ax1.set_xlabel('날짜')
ax1.set_ylabel('대출잔액평균/대출연체자수(단위:천원/명)', color=color)
ax1.bar(loan_df['CRTR_YM'], loan_df['LON_AVG_BLC'], color='pink', label='대출잔액평균')
ax1.plot(loan_df['CRTR_YM'], loan_df['SUM_OVDU_NOPE'], marker='o', color='green', linestyle='--', label='총 연체자 수')
ax1.tick_params(axis='y', labelcolor=color)

# 두 번째 y축 (값2)
ax2 = ax1.twinx()  # 같은 x축을 공유하는 두 번째 y축
color = 'tab:red'
ax2.set_ylabel('비트코인 종가(단위:달러)', color=color)
ax2.plot(coin_data['날짜'], coin_data['종가'], color='grey', label='비트코인')
ax2.tick_params(axis='y', labelcolor=color)

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('2017-12', color='blue', linestyle='--', label='비트코인 변곡점1')
plt.axvline('2019-06', color='red', linestyle='--', label='비트코인 변곡점2')
plt.axvline('2021-03', color='purple', linestyle='--', label='비트코인 변곡점3')
plt.axvline('2021-10', color='green', linestyle='--', label='비트코인 변곡점4')

fig.tight_layout()
ax1.legend()
ax2.legend()
plt.show()

# --> 비트코인이 상승하는 구간에서 대체적으로 연체자 수가 감소하는 경향이 있으며, 하락하는 구간에서는 증가하는 것을 볼 수 있다.(?)
# --> 대출잔액평균은 비트코인과 관계없이 전체적으로 증가하는 것을 볼 수 있다.
# --> 비트코인 변곡점 시기에서 대체적으로 전월대비 대출연체자수가 상승하는 것을 볼 수 있다.
# --> 비트코인과 대출잔액평균, 그리고 대출 총 연체자 수는 관계성이 적은 것으로 파악된다.

fig, ax1 = plt.subplots(figsize=(20, 5))

# 첫 번째 y축 (값1)
color = 'tab:blue'
ax1.set_xlabel('날짜')
ax1.set_ylabel('대출잔액평균/대출연체자수(단위:천원/명)', color=color)
ax1.bar(loan_df['CRTR_YM'], loan_df['LON_AVG_BLC'], color='pink', label='대출잔액평균')
ax1.plot(loan_df['CRTR_YM'], loan_df['SUM_OVDU_NOPE'], marker='o', color='green', linestyle='--', label='총 연체자 수')
ax1.tick_params(axis='y', labelcolor=color)

# 두 번째 y축 (값2)
ax2 = ax1.twinx()  # 같은 x축을 공유하는 두 번째 y축
color = 'tab:red'
ax2.set_ylabel('코스닥 종가(단위:백만원)', color=color)
ax2.plot(kosdaq_data['날짜'], kosdaq_data['종가'], color='grey', label='코스닥')
ax2.tick_params(axis='y', labelcolor=color)

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('2018-04', color='blue', linestyle='--', label='코스닥 변곡점1')
plt.axvline('2020-03', color='red', linestyle='--', label='코스닥 변곡점2')
plt.axvline('2021-07', color='purple', linestyle='--', label='코스닥 변곡점3')

fig.tight_layout()
ax1.legend()
ax2.legend()
plt.show()

fig, ax1 = plt.subplots(figsize=(20, 5))

# 첫 번째 y축 (값1)
color = 'tab:blue'
ax1.set_xlabel('날짜')
ax1.set_ylabel('대출잔액평균/대출연체자수(단위:천원/명)', color=color)
ax1.bar(loan_df['CRTR_YM'], loan_df['LON_AVG_BLC'], color='pink', label='대출잔액평균')
ax1.plot(loan_df['CRTR_YM'], loan_df['SUM_OVDU_NOPE'], marker='o', color='green', linestyle='--', label='총 연체자 수')
ax1.tick_params(axis='y', labelcolor=color)

# 두 번째 y축 (값2)
ax2 = ax1.twinx()  # 같은 x축을 공유하는 두 번째 y축
color = 'tab:red'
ax2.set_ylabel('코스피 종가(단위:백만원)', color=color)
ax2.plot(kospi_data['날짜'], kospi_data['종가'], color='grey', label='코스피')
ax2.tick_params(axis='y', labelcolor=color)

# x 축 레이블 설정 (년도별 간격)
plt.gca().xaxis.set_major_locator(MultipleLocator(12)) # 12개월마다 표시

# 시기에 대한 구분선 추가
plt.axvline('2017-11', color='blue', linestyle='--', label='코스피 변곡점1')
plt.axvline('2020-03', color='red', linestyle='--', label='코스피 변곡점2')
plt.axvline('2021-06', color='purple', linestyle='--', label='코스피 변곡점3')

fig.tight_layout()
ax1.legend()
ax2.legend()
plt.show()

"""# 주택보유자 수-월소득평균 상관분석"""

# 필요한 행 추출
house = data[['CRTR_YM', 'MM_INCM', 'HOUSE_OWRN_NOPE']]
house

# 결측값 확인
#house.isnull().sum()

# 연월 계산하기 위해 문자열로 변환
house['CRTR_YM'] = house['CRTR_YM'].astype(str)

# 연도와 월을 추출
house['Year'] = house['CRTR_YM'].str[:4].astype(int)
house['Month'] = house['CRTR_YM'].str[4:].astype(int)

# 연도별로 그룹화하여 값 구하기
house_incm = house.groupby('Year')['MM_INCM'].sum()
house_owrn = house.groupby('Year')['HOUSE_OWRN_NOPE'].sum()

# 데이터 프레임 만들기
house_df = pd.DataFrame({'Sum_Income': house_incm, 'Sum_Owner': house_owrn})

# 'Year' 열을 인덱스에서 열로 옮기기
house_df = house_df.reset_index()
house_df

# 월을 기준으로 그룹화
house_incm1 = house.groupby('CRTR_YM')['MM_INCM'].sum()
house_owrn1 = house.groupby('CRTR_YM')['HOUSE_OWRN_NOPE'].sum()

# 데이터 프레임 만들기
house_df1 = pd.DataFrame({'Sum_Income': house_incm1, 'Sum_Owner': house_owrn1})

# 'Year' 열을 인덱스에서 열로 옮기기
house_df1 = house_df1.reset_index()
house_df1 = house_df1[house_df1['CRTR_YM'] != '202304']
house_df1

# 산점도 그리기
plt.scatter(house_df1['Sum_Owner'], house_df1['Sum_Income'], c=house_df1['Sum_Income'])
plt.show()

# --> 양의 관계 확인

# 그래프로 시각화
plt.bar(house_df['Year'], house_df['Sum_Owner'], color='pink', label='주택보유자수')
plt.plot(house_df['Year'], house_df['Sum_Income'], marker='o', color='green', linestyle='--', label='월소득')
plt.xlabel('년도')
plt.ylabel('(단위:백만원)')
plt.legend()
plt.show()

# --> 월소득이 증가할수록 주택보유자수가 증가함을 알 수 있음.

"""# 승용차보유자 수-월소득평균 상관분석"""

# 필요한 행 추출
car = data[['CRTR_YM', 'MM_INCM', 'CAR_OWNR_NOPE', 'IPTC_OWNR_NOPE']]
car

# 결측값 확인
car.isnull().sum()

# 자동차 총 보유수를 구하기 위해 승용차+자동차 열을 생성
car['sum_car'] = car['CAR_OWNR_NOPE'] + car['IPTC_OWNR_NOPE']
car

# 연월 계산하기 위해 문자열로 변환
car['CRTR_YM'] = car['CRTR_YM'].astype(str)

# 연도와 월을 추출
car['Year'] = car['CRTR_YM'].str[:4].astype(int)
car['Month'] = car['CRTR_YM'].str[4:].astype(int)

# 연도별로 그룹화하여 값 구하기
car_incm = car.groupby('Year')['MM_INCM'].sum()
car_owrn = car.groupby('Year')['sum_car'].sum()

# 데이터 프레임 만들기
car_df = pd.DataFrame({'Sum_Income': car_incm, 'Sum_Owner': car_owrn})

# 'Year' 열을 인덱스에서 열로 옮기기
car_df = car_df.reset_index()
car_df

# 월을 기준으로 그룹화
car_incm1 = car.groupby('CRTR_YM')['MM_INCM'].sum()
car_owrn1 = car.groupby('CRTR_YM')['sum_car'].sum()

# 데이터 프레임 만들기
car_df1 = pd.DataFrame({'Sum_Income': car_incm1, 'Sum_Owner': car_owrn1})

# 'Year' 열을 인덱스에서 열로 옮기기
car_df1 = house_df1.reset_index()
car_df1 = car_df1[car_df1['CRTR_YM'] != '202304']
car_df1

# 산점도 그리기
plt.scatter(car_df1['Sum_Owner'], car_df1['Sum_Income'], c=car_df1['Sum_Income'])
plt.show()

# --> 양의 관계 확인

# 그래프로 시각화
plt.bar(car_df['Year'], car_df['Sum_Owner'], color='orange', label='승용차보유자수')
plt.plot(car_df['Year'], car_df['Sum_Income'], marker='o', color='blue', linestyle='--', label='월소득')
plt.xlabel('년도')
plt.ylabel('(단위:백만원)')
plt.legend()
plt.show()

# --> 월소득이 증가할수록 승용차보유자수가 증가함을 알 수 있음.

dd = data[['CRTR_YM', 'MM_INCM', 'SHT_OVDU_NOPE', 'LNG_OVDU_NOPE', 'LON_AVG_BLC']]
dd.info()